//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gamma.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GammaEntities : DbContext
    {
        public GammaEntities()
            : base("name=GammaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C1CCharacteristicProperties> C1CCharacteristicProperties { get; set; }
        public virtual DbSet<C1CEnumGroupTypes> C1CEnumGroupTypes { get; set; }
        public virtual DbSet<C1CMeasureUnitQualifiers> C1CMeasureUnitQualifiers { get; set; }
        public virtual DbSet<C1CMeasureUnits> C1CMeasureUnits { get; set; }
        public virtual DbSet<C1CNomenclatureGroups> C1CNomenclatureGroups { get; set; }
        public virtual DbSet<C1CNomenclatureProperties> C1CNomenclatureProperties { get; set; }
        public virtual DbSet<C1CProperties> C1CProperties { get; set; }
        public virtual DbSet<C1CPropertyValueGammaPropertyValue> C1CPropertyValueGammaPropertyValue { get; set; }
        public virtual DbSet<C1CPropertyValues> C1CPropertyValues { get; set; }
        public virtual DbSet<C1CQuality> C1CQuality { get; set; }
        public virtual DbSet<C1CRejectionReasons> C1CRejectionReasons { get; set; }
        public virtual DbSet<C1CSpecificationInputNomenclature> C1CSpecificationInputNomenclature { get; set; }
        public virtual DbSet<C1CSpecificationOutputNomenclature> C1CSpecificationOutputNomenclature { get; set; }
        public virtual DbSet<Departments> Departments { get; set; }
        public virtual DbSet<DocChangeStateProducts> DocChangeStateProducts { get; set; }
        public virtual DbSet<DocTypes> DocTypes { get; set; }
        public virtual DbSet<DocWithdrawal> DocWithdrawal { get; set; }
        public virtual DbSet<Enterprises> Enterprises { get; set; }
        public virtual DbSet<GammaProperties> GammaProperties { get; set; }
        public virtual DbSet<Permits> Permits { get; set; }
        public virtual DbSet<PermitTables> PermitTables { get; set; }
        public virtual DbSet<PlaceGroups> PlaceGroups { get; set; }
        public virtual DbSet<ProcessModels> ProcessModels { get; set; }
        public virtual DbSet<ProductionTaskStates> ProductionTaskStates { get; set; }
        public virtual DbSet<ProductionTaskWR> ProductionTaskWR { get; set; }
        public virtual DbSet<ProductStates> ProductStates { get; set; }
        public virtual DbSet<Reports> Reports { get; set; }
        public virtual DbSet<RolePermits> RolePermits { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<SourceSpools> SourceSpools { get; set; }
        public virtual DbSet<SpoolInstallLog> SpoolInstallLog { get; set; }
        public virtual DbSet<Templates> Templates { get; set; }
        public virtual DbSet<UserPrintNames> UserPrintNames { get; set; }
        public virtual DbSet<vProductionTaskBatches> vProductionTaskBatches { get; set; }
        public virtual DbSet<vProductionTaskProducts> vProductionTaskProducts { get; set; }
        public virtual DbSet<C1CSpecifications> C1CSpecifications { get; set; }
        public virtual DbSet<C1CNomenclatureAnalogs> C1CNomenclatureAnalogs { get; set; }
        public virtual DbSet<DocWithdrawalMaterials> DocWithdrawalMaterials { get; set; }
        public virtual DbSet<ProductionTaskRWCutting> ProductionTaskRWCutting { get; set; }
        public virtual DbSet<ProductionTasks> ProductionTasks { get; set; }
        public virtual DbSet<vCharacteristicSGBProperties> vCharacteristicSGBProperties { get; set; }
        public virtual DbSet<C1CContractors> C1CContractors { get; set; }
        public virtual DbSet<C1CDocShipmentOrder> C1CDocShipmentOrder { get; set; }
        public virtual DbSet<C1CDocShipmentOrderGoods> C1CDocShipmentOrderGoods { get; set; }
        public virtual DbSet<C1CWarehouses> C1CWarehouses { get; set; }
        public virtual DbSet<PostTypes> PostTypes { get; set; }
        public virtual DbSet<ProductionTaskSGB> ProductionTaskSGB { get; set; }
        public virtual DbSet<ProductionTaskBatches> ProductionTaskBatches { get; set; }
        public virtual DbSet<MaterialTypes> MaterialTypes { get; set; }
        public virtual DbSet<Branches> Branches { get; set; }
        public virtual DbSet<DocBrokeProductRejectionReasons> DocBrokeProductRejectionReasons { get; set; }
        public virtual DbSet<DocBrokeDecisionProducts> DocBrokeDecisionProducts { get; set; }
        public virtual DbSet<DocWithdrawalProducts> DocWithdrawalProducts { get; set; }
        public virtual DbSet<DocProducts> DocProducts { get; set; }
        public virtual DbSet<DocBroke> DocBroke { get; set; }
        public virtual DbSet<Rests> Rests { get; set; }
        public virtual DbSet<BarcodeTypes> BarcodeTypes { get; set; }
        public virtual DbSet<NomenclatureBarcodes> NomenclatureBarcodes { get; set; }
        public virtual DbSet<NomenclatureGammaInfo> NomenclatureGammaInfo { get; set; }
        public virtual DbSet<ProductItems> ProductItems { get; set; }
        public virtual DbSet<DocMovementOrderNomenclature> DocMovementOrderNomenclature { get; set; }
        public virtual DbSet<Persons> Persons { get; set; }
        public virtual DbSet<C1CPlaces> C1CPlaces { get; set; }
        public virtual DbSet<DocMovement> DocMovement { get; set; }
        public virtual DbSet<vDocMovementGoods> vDocMovementGoods { get; set; }
        public virtual DbSet<ProductKinds> ProductKinds { get; set; }
        public virtual DbSet<C1CDocInternalOrders> C1CDocInternalOrders { get; set; }
        public virtual DbSet<Docs> Docs { get; set; }
        public virtual DbSet<DocProduction> DocProduction { get; set; }
        public virtual DbSet<ActiveProductionTasks> ActiveProductionTasks { get; set; }
        public virtual DbSet<vPlacePropertiesValues> vPlacePropertiesValues { get; set; }
        public virtual DbSet<PlaceZones> PlaceZones { get; set; }
        public virtual DbSet<DocInProducts> DocInProducts { get; set; }
        public virtual DbSet<DocOutProducts> DocOutProducts { get; set; }
        public virtual DbSet<v1COrders> v1COrders { get; set; }
        public virtual DbSet<CurrentPlaceUsers> CurrentPlaceUsers { get; set; }
        public virtual DbSet<v1CWorkingSpecifications> v1CWorkingSpecifications { get; set; }
        public virtual DbSet<vProductsInfo> vProductsInfo { get; set; }
        public virtual DbSet<DocShipmentOrders> DocShipmentOrders { get; set; }
        public virtual DbSet<DocBrokeProducts> DocBrokeProducts { get; set; }
        public virtual DbSet<vDocMovementProducts> vDocMovementProducts { get; set; }
        public virtual DbSet<v1COrderGoods> v1COrderGoods { get; set; }
        public virtual DbSet<vPMSpoolsToGroupPack> vPMSpoolsToGroupPack { get; set; }
        public virtual DbSet<Places> Places { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<C1CCharacteristics> C1CCharacteristics { get; set; }
        public virtual DbSet<ProductPallets> ProductPallets { get; set; }
        public virtual DbSet<DocProductionProducts> DocProductionProducts { get; set; }
        public virtual DbSet<DocMovementOrder> DocMovementOrder { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<DocCloseShiftRemainders> DocCloseShiftRemainders { get; set; }
        public virtual DbSet<ProductGroupPacks> ProductGroupPacks { get; set; }
        public virtual DbSet<vGroupPackSpools> vGroupPackSpools { get; set; }
        public virtual DbSet<DocInventarisationProducts> DocInventarisationProducts { get; set; }
        public virtual DbSet<DocCloseShiftNomenclatureRests> DocCloseShiftNomenclatureRests { get; set; }
        public virtual DbSet<C1CMainSpecifications> C1CMainSpecifications { get; set; }
        public virtual DbSet<DocCloseShiftWastes> DocCloseShiftWastes { get; set; }
        public virtual DbSet<C1CNomenclature> C1CNomenclature { get; set; }
        public virtual DbSet<ProductSpools> ProductSpools { get; set; }
        public virtual DbSet<ProductBales> ProductBales { get; set; }
        public virtual DbSet<DocCloseShiftSamples> DocCloseShiftSamples { get; set; }
        public virtual DbSet<v1CDocComplectationPositions> v1CDocComplectationPositions { get; set; }
        public virtual DbSet<C1CDocComplectation> C1CDocComplectation { get; set; }
        public virtual DbSet<C1CDocComplectationNomenclature> C1CDocComplectationNomenclature { get; set; }
        public virtual DbSet<DocComplectation> DocComplectation { get; set; }
        public virtual DbSet<ProductionTaskConverting> ProductionTaskConverting { get; set; }
        public virtual DbSet<vRobotNomenclatures> vRobotNomenclatures { get; set; }
        public virtual DbSet<LocalSettings> LocalSettings { get; set; }
        public virtual DbSet<Devices> Devices { get; set; }
        public virtual DbSet<EventKinds> EventKinds { get; set; }
        public virtual DbSet<LogEvents> LogEvents { get; set; }
        public virtual DbSet<Shifts> Shifts { get; set; }
        public virtual DbSet<EventStates> EventStates { get; set; }
        public virtual DbSet<ModbusDevices> ModbusDevices { get; set; }
        public virtual DbSet<PlaceRemotePrinters> PlaceRemotePrinters { get; set; }
        public virtual DbSet<RemotePrinters> RemotePrinters { get; set; }
        public virtual DbSet<DocCloseShiftMaterials> DocCloseShiftMaterials { get; set; }
        public virtual DbSet<DocCloseShiftMaterialTypes> DocCloseShiftMaterialTypes { get; set; }
        public virtual DbSet<DocCloseShiftMovementProducts> DocCloseShiftMovementProducts { get; set; }
        public virtual DbSet<DocCloseShiftUtilizationProducts> DocCloseShiftUtilizationProducts { get; set; }
        public virtual DbSet<RemainderTypes> RemainderTypes { get; set; }
        public virtual DbSet<vProductsCurrentStateInfo> vProductsCurrentStateInfo { get; set; }
        public virtual DbSet<DocBrokeDecisionProductWithdrawalProducts> DocBrokeDecisionProductWithdrawalProducts { get; set; }
        public virtual DbSet<vProductionMaterials> vProductionMaterials { get; set; }
        public virtual DbSet<PlaceWithdrawalMaterialTypes> PlaceWithdrawalMaterialTypes { get; set; }
        public virtual DbSet<DocShipmentOrderPersons> DocShipmentOrderPersons { get; set; }
        public virtual DbSet<CriticalLogs> CriticalLogs { get; set; }
        public virtual DbSet<vDocCloseShiftMaterials> vDocCloseShiftMaterials { get; set; }
        public virtual DbSet<DocCloseShiftRepackProducts> DocCloseShiftRepackProducts { get; set; }
        public virtual DbSet<ProductionTaskConvertingSamples> ProductionTaskConvertingSamples { get; set; }
        public virtual DbSet<DocUnwinderRemainders> DocUnwinderRemainders { get; set; }
        public virtual DbSet<vDocMaterialProductionCompositionCalculations> vDocMaterialProductionCompositionCalculations { get; set; }
        public virtual DbSet<DocMaterialProducts> DocMaterialProducts { get; set; }
        public virtual DbSet<DocMaterialProductions> DocMaterialProductions { get; set; }
        public virtual DbSet<DocMaterialTankGroups> DocMaterialTankGroups { get; set; }
        public virtual DbSet<DocMaterialTankRemainders> DocMaterialTankRemainders { get; set; }
        public virtual DbSet<DocMaterialTanks> DocMaterialTanks { get; set; }
        public virtual DbSet<vDocMaterialProductionDirectCalculations> vDocMaterialProductionDirectCalculations { get; set; }
        public virtual DbSet<vPlaceZones> vPlaceZones { get; set; }
        public virtual DbSet<Places1CWarehouses> Places1CWarehouses { get; set; }
        public virtual DbSet<DocRepack> DocRepack { get; set; }
        public virtual DbSet<DocRepackProducts> DocRepackProducts { get; set; }
        public virtual DbSet<vDocRepackProducts> vDocRepackProducts { get; set; }
        public virtual DbSet<DocCloseShiftAuxiliaryMaterials> DocCloseShiftAuxiliaryMaterials { get; set; }
        public virtual DbSet<C1CDowntimeTypeDetails> C1CDowntimeTypeDetails { get; set; }
        public virtual DbSet<C1CDowntimeTypes> C1CDowntimeTypes { get; set; }
        public virtual DbSet<DocCloseShiftDowntimes> DocCloseShiftDowntimes { get; set; }
        public virtual DbSet<ProductionTaskDowntimes> ProductionTaskDowntimes { get; set; }
        public virtual DbSet<C1CEquipmentNodeDetails> C1CEquipmentNodeDetails { get; set; }
        public virtual DbSet<C1CEquipmentNodes> C1CEquipmentNodes { get; set; }
        public virtual DbSet<DowntimeTemplates> DowntimeTemplates { get; set; }
        public virtual DbSet<PlaceAuxiliaryMaterials> PlaceAuxiliaryMaterials { get; set; }
        public virtual DbSet<RobotProduct1CCharacteristic> RobotProduct1CCharacteristic { get; set; }
        public virtual DbSet<C1CEquipmentNodesPlaces> C1CEquipmentNodesPlaces { get; set; }
        public virtual DbSet<vProductsBaseInfo> vProductsBaseInfo { get; set; }
        public virtual DbSet<DocBrokeDecision> DocBrokeDecision { get; set; }
        public virtual DbSet<vDocBroke> vDocBroke { get; set; }
        public virtual DbSet<vNomenclatureSGBProperties> vNomenclatureSGBProperties { get; set; }
    
        public virtual ObjectResult<string> DeleteGroupPack(Nullable<System.Guid> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteGroupPack", productIDParameter);
        }
    
        public virtual ObjectResult<string> DeleteProductionTaskBatch(Nullable<System.Guid> productionTaskBatchID)
        {
            var productionTaskBatchIDParameter = productionTaskBatchID.HasValue ?
                new ObjectParameter("ProductionTaskBatchID", productionTaskBatchID) :
                new ObjectParameter("ProductionTaskBatchID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteProductionTaskBatch", productionTaskBatchIDParameter);
        }
    
        public virtual ObjectResult<string> DeleteSpool(Nullable<System.Guid> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteSpool", productIDParameter);
        }
    
        public virtual ObjectResult<string> DeleteUnload(Nullable<System.Guid> docID)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteUnload", docIDParameter);
        }
    
        public virtual ObjectResult<FindProductionTasks_Result> FindProductionTasks(Nullable<int> batchKindID, Nullable<byte> productionTaskStateID, Nullable<System.DateTime> dateBegin, Nullable<System.DateTime> dateEnd, string number)
        {
            var batchKindIDParameter = batchKindID.HasValue ?
                new ObjectParameter("BatchKindID", batchKindID) :
                new ObjectParameter("BatchKindID", typeof(int));
    
            var productionTaskStateIDParameter = productionTaskStateID.HasValue ?
                new ObjectParameter("ProductionTaskStateID", productionTaskStateID) :
                new ObjectParameter("ProductionTaskStateID", typeof(byte));
    
            var dateBeginParameter = dateBegin.HasValue ?
                new ObjectParameter("DateBegin", dateBegin) :
                new ObjectParameter("DateBegin", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindProductionTasks_Result>("FindProductionTasks", batchKindIDParameter, productionTaskStateIDParameter, dateBeginParameter, dateEndParameter, numberParameter);
        }
    
        public virtual int GenerateNewNumbersForDoc(Nullable<System.Guid> docID)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateNewNumbersForDoc", docIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> GetActiveSourceSpools(Nullable<int> placeID)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("GetActiveSourceSpools", placeIDParameter);
        }
    
        public virtual ObjectResult<GetCharPropsDescriptions_Result> GetCharPropsDescriptions(Nullable<System.Guid> characteristicID)
        {
            var characteristicIDParameter = characteristicID.HasValue ?
                new ObjectParameter("CharacteristicID", characteristicID) :
                new ObjectParameter("CharacteristicID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCharPropsDescriptions_Result>("GetCharPropsDescriptions", characteristicIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCharSpoolLayerNumber(Nullable<System.Guid> characteristicID)
        {
            var characteristicIDParameter = characteristicID.HasValue ?
                new ObjectParameter("CharacteristicID", characteristicID) :
                new ObjectParameter("CharacteristicID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCharSpoolLayerNumber", characteristicIDParameter);
        }
    
        public virtual ObjectResult<GetDocCloseShiftPMSpools_Result> GetDocCloseShiftPMSpools(Nullable<System.Guid> docID)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocCloseShiftPMSpools_Result>("GetDocCloseShiftPMSpools", docIDParameter);
        }
    
        public virtual ObjectResult<GetDocCloseShiftWRGroupPacks_Result> GetDocCloseShiftWRGroupPacks(Nullable<System.Guid> docID)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocCloseShiftWRGroupPacks_Result>("GetDocCloseShiftWRGroupPacks", docIDParameter);
        }
    
        public virtual ObjectResult<GetInputNomenclature_Result> GetInputNomenclature(Nullable<System.Guid> nomenclatureID, Nullable<int> placeGroupID)
        {
            var nomenclatureIDParameter = nomenclatureID.HasValue ?
                new ObjectParameter("NomenclatureID", nomenclatureID) :
                new ObjectParameter("NomenclatureID", typeof(System.Guid));
    
            var placeGroupIDParameter = placeGroupID.HasValue ?
                new ObjectParameter("PlaceGroupID", placeGroupID) :
                new ObjectParameter("PlaceGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInputNomenclature_Result>("GetInputNomenclature", nomenclatureIDParameter, placeGroupIDParameter);
        }
    
        public virtual ObjectResult<GetNomenclatureFolders_Result> GetNomenclatureFolders(Nullable<int> placeGroupID)
        {
            var placeGroupIDParameter = placeGroupID.HasValue ?
                new ObjectParameter("PlaceGroupID", placeGroupID) :
                new ObjectParameter("PlaceGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNomenclatureFolders_Result>("GetNomenclatureFolders", placeGroupIDParameter);
        }
    
        public virtual ObjectResult<GetProductionTaskBatchSGBProperties_Result> GetProductionTaskBatchSGBProperties(Nullable<System.Guid> productionTaskBatchID)
        {
            var productionTaskBatchIDParameter = productionTaskBatchID.HasValue ?
                new ObjectParameter("ProductionTaskBatchID", productionTaskBatchID) :
                new ObjectParameter("ProductionTaskBatchID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductionTaskBatchSGBProperties_Result>("GetProductionTaskBatchSGBProperties", productionTaskBatchIDParameter);
        }
    
        public virtual ObjectResult<GetProductionTaskBatchWRProperties_Result> GetProductionTaskBatchWRProperties(Nullable<System.Guid> productionTaskBatchID)
        {
            var productionTaskBatchIDParameter = productionTaskBatchID.HasValue ?
                new ObjectParameter("ProductionTaskBatchID", productionTaskBatchID) :
                new ObjectParameter("ProductionTaskBatchID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductionTaskBatchWRProperties_Result>("GetProductionTaskBatchWRProperties", productionTaskBatchIDParameter);
        }
    
        public virtual ObjectResult<GetProductionTaskByBatchID_Result> GetProductionTaskByBatchID(Nullable<System.Guid> productionTaskBatchID, Nullable<short> placeGroupID)
        {
            var productionTaskBatchIDParameter = productionTaskBatchID.HasValue ?
                new ObjectParameter("ProductionTaskBatchID", productionTaskBatchID) :
                new ObjectParameter("ProductionTaskBatchID", typeof(System.Guid));
    
            var placeGroupIDParameter = placeGroupID.HasValue ?
                new ObjectParameter("PlaceGroupID", placeGroupID) :
                new ObjectParameter("PlaceGroupID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductionTaskByBatchID_Result>("GetProductionTaskByBatchID", productionTaskBatchIDParameter, placeGroupIDParameter);
        }
    
        public virtual ObjectResult<GetProductionTaskProducts_Result> GetProductionTaskProducts(Nullable<System.Guid> productionTaskID)
        {
            var productionTaskIDParameter = productionTaskID.HasValue ?
                new ObjectParameter("ProductionTaskID", productionTaskID) :
                new ObjectParameter("ProductionTaskID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductionTaskProducts_Result>("GetProductionTaskProducts", productionTaskIDParameter);
        }
    
        public virtual ObjectResult<GetProductionTasks_Result> GetProductionTasks(Nullable<int> batchKindID)
        {
            var batchKindIDParameter = batchKindID.HasValue ?
                new ObjectParameter("BatchKindID", batchKindID) :
                new ObjectParameter("BatchKindID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductionTasks_Result>("GetProductionTasks", batchKindIDParameter);
        }
    
        public virtual ObjectResult<GetProductionTasksOnState_Result> GetProductionTasksOnState(Nullable<int> batchKindID, Nullable<int> productionTaskStateID)
        {
            var batchKindIDParameter = batchKindID.HasValue ?
                new ObjectParameter("BatchKindID", batchKindID) :
                new ObjectParameter("BatchKindID", typeof(int));
    
            var productionTaskStateIDParameter = productionTaskStateID.HasValue ?
                new ObjectParameter("ProductionTaskStateID", productionTaskStateID) :
                new ObjectParameter("ProductionTaskStateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductionTasksOnState_Result>("GetProductionTasksOnState", batchKindIDParameter, productionTaskStateIDParameter);
        }
    
        public virtual ObjectResult<GetSpoolRejectionReasons_Result> GetSpoolRejectionReasons()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSpoolRejectionReasons_Result>("GetSpoolRejectionReasons");
        }
    
        public virtual ObjectResult<Nullable<byte>> UserPermit(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<byte>>("UserPermit", tableNameParameter);
        }
    
        public virtual int mxp_RecreateRolePermits(Nullable<System.Guid> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("mxp_RecreateRolePermits", roleIDParameter);
        }
    
        public virtual int RecreateUser(Nullable<System.Guid> userID, string password)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RecreateUser", userIDParameter, passwordParameter);
        }
    
        public virtual int WriteSpoolInstallLog(Nullable<System.Guid> productID, Nullable<int> placeID, Nullable<int> shiftID, Nullable<byte> unwinderID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var unwinderIDParameter = unwinderID.HasValue ?
                new ObjectParameter("UnwinderID", unwinderID) :
                new ObjectParameter("UnwinderID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WriteSpoolInstallLog", productIDParameter, placeIDParameter, shiftIDParameter, unwinderIDParameter);
        }
    
        public virtual ObjectResult<GetDocCloseShiftConvertingPallets_Result> GetDocCloseShiftConvertingPallets(Nullable<System.Guid> docID)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocCloseShiftConvertingPallets_Result>("GetDocCloseShiftConvertingPallets", docIDParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftConvertingPallets_Result> FillDocCloseShiftConvertingPallets(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftConvertingPallets_Result>("FillDocCloseShiftConvertingPallets", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftConvertingMaterials_Result> FillDocCloseShiftConvertingMaterials(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftConvertingMaterials_Result>("FillDocCloseShiftConvertingMaterials", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<GetBatchProducts_Result> GetBatchProducts(Nullable<System.Guid> productionTaskBatchID)
        {
            var productionTaskBatchIDParameter = productionTaskBatchID.HasValue ?
                new ObjectParameter("ProductionTaskBatchID", productionTaskBatchID) :
                new ObjectParameter("ProductionTaskBatchID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchProducts_Result>("GetBatchProducts", productionTaskBatchIDParameter);
        }
    
        public virtual ObjectResult<GetCharacteristicsForProdTaskPM_Result> GetCharacteristicsForProdTaskPM(Nullable<System.Guid> nomenclatureID, string color, string buyer, Nullable<int> placeID)
        {
            var nomenclatureIDParameter = nomenclatureID.HasValue ?
                new ObjectParameter("NomenclatureID", nomenclatureID) :
                new ObjectParameter("NomenclatureID", typeof(System.Guid));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var buyerParameter = buyer != null ?
                new ObjectParameter("Buyer", buyer) :
                new ObjectParameter("Buyer", typeof(string));
    
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCharacteristicsForProdTaskPM_Result>("GetCharacteristicsForProdTaskPM", nomenclatureIDParameter, colorParameter, buyerParameter, placeIDParameter);
        }
    
        public virtual int UploadDocCloseShiftReportTo1C(Nullable<System.Guid> docID, Nullable<bool> isPreviousDocClose)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            var isPreviousDocCloseParameter = isPreviousDocClose.HasValue ?
                new ObjectParameter("IsPreviousDocClose", isPreviousDocClose) :
                new ObjectParameter("IsPreviousDocClose", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UploadDocCloseShiftReportTo1C", docIDParameter, isPreviousDocCloseParameter);
        }
    
        public virtual ObjectResult<GetOldProductInfo_Result> GetOldProductInfo(string number, Nullable<int> productKindId)
        {
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var productKindIdParameter = productKindId.HasValue ?
                new ObjectParameter("ProductKindId", productKindId) :
                new ObjectParameter("ProductKindId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOldProductInfo_Result>("GetOldProductInfo", numberParameter, productKindIdParameter);
        }
    
        public virtual int SaveOldProductToNewBase(Nullable<long> id, Nullable<int> productKindId, Nullable<System.Guid> nomenclatureID, Nullable<System.Guid> characteristicID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var productKindIdParameter = productKindId.HasValue ?
                new ObjectParameter("ProductKindId", productKindId) :
                new ObjectParameter("ProductKindId", typeof(int));
    
            var nomenclatureIDParameter = nomenclatureID.HasValue ?
                new ObjectParameter("NomenclatureID", nomenclatureID) :
                new ObjectParameter("NomenclatureID", typeof(System.Guid));
    
            var characteristicIDParameter = characteristicID.HasValue ?
                new ObjectParameter("CharacteristicID", characteristicID) :
                new ObjectParameter("CharacteristicID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveOldProductToNewBase", idParameter, productKindIdParameter, nomenclatureIDParameter, characteristicIDParameter);
        }
    
        public virtual int UnpackGroupPack(Nullable<System.Guid> productID, string printName)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            var printNameParameter = printName != null ?
                new ObjectParameter("PrintName", printName) :
                new ObjectParameter("PrintName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnpackGroupPack", productIDParameter, printNameParameter);
        }
    
        public virtual ObjectResult<GetProductRelations_Result2> GetProductRelations(Nullable<System.Guid> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductRelations_Result2>("GetProductRelations", productIDParameter);
        }
    
        public virtual ObjectResult<GetDocRelations_Result> GetDocRelations(Nullable<System.Guid> docID)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocRelations_Result>("GetDocRelations", docIDParameter);
        }
    
        public virtual ObjectResult<GroupPackSpools_Result> GroupPackSpools(Nullable<System.Guid> docID)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GroupPackSpools_Result>("GroupPackSpools", docIDParameter);
        }
    
        public virtual ObjectResult<string> ValidateGroupPackBeforeSave(Nullable<System.Guid> nomenclatureID, Nullable<System.Guid> characteristicID, Nullable<decimal> diameter, Nullable<decimal> weight, Nullable<int> countRolls, Nullable<System.Guid> productID)
        {
            var nomenclatureIDParameter = nomenclatureID.HasValue ?
                new ObjectParameter("NomenclatureID", nomenclatureID) :
                new ObjectParameter("NomenclatureID", typeof(System.Guid));
    
            var characteristicIDParameter = characteristicID.HasValue ?
                new ObjectParameter("CharacteristicID", characteristicID) :
                new ObjectParameter("CharacteristicID", typeof(System.Guid));
    
            var diameterParameter = diameter.HasValue ?
                new ObjectParameter("Diameter", diameter) :
                new ObjectParameter("Diameter", typeof(decimal));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var countRollsParameter = countRolls.HasValue ?
                new ObjectParameter("CountRolls", countRolls) :
                new ObjectParameter("CountRolls", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ValidateGroupPackBeforeSave", nomenclatureIDParameter, characteristicIDParameter, diameterParameter, weightParameter, countRollsParameter, productIDParameter);
        }
    
        public virtual ObjectResult<string> ValidateSpoolBeforeSaveInGroupPack(Nullable<decimal> weight, Nullable<System.Guid> productID)
        {
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ValidateSpoolBeforeSaveInGroupPack", weightParameter, productIDParameter);
        }
    
        public virtual ObjectResult<string> CheckAddedGroupPackSpool(Nullable<System.Guid> addedProductId, Nullable<System.Guid> baseProductId)
        {
            var addedProductIdParameter = addedProductId.HasValue ?
                new ObjectParameter("AddedProductId", addedProductId) :
                new ObjectParameter("AddedProductId", typeof(System.Guid));
    
            var baseProductIdParameter = baseProductId.HasValue ?
                new ObjectParameter("BaseProductId", baseProductId) :
                new ObjectParameter("BaseProductId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CheckAddedGroupPackSpool", addedProductIdParameter, baseProductIdParameter);
        }
    
        public virtual ObjectResult<FindNomenclatureByStringWithFilter_Result2> FindNomenclatureByStringWithFilter(string searchString, Nullable<int> id, Nullable<bool> filterByPlaceGroup)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var filterByPlaceGroupParameter = filterByPlaceGroup.HasValue ?
                new ObjectParameter("FilterByPlaceGroup", filterByPlaceGroup) :
                new ObjectParameter("FilterByPlaceGroup", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindNomenclatureByStringWithFilter_Result2>("FindNomenclatureByStringWithFilter", searchStringParameter, idParameter, filterByPlaceGroupParameter);
        }
    
        public virtual ObjectResult<GetMaterialNomenclatureFolders_Result1> GetMaterialNomenclatureFolders(Nullable<int> materialTypeID)
        {
            var materialTypeIDParameter = materialTypeID.HasValue ?
                new ObjectParameter("MaterialTypeID", materialTypeID) :
                new ObjectParameter("MaterialTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMaterialNomenclatureFolders_Result1>("GetMaterialNomenclatureFolders", materialTypeIDParameter);
        }
    
        public virtual ObjectResult<string> DeletePallet(Nullable<System.Guid> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeletePallet", productIDParameter);
        }
    
        public virtual ObjectResult<string> DeleteDocFromDocCloseShiftDocs(Nullable<System.Guid> docID)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteDocFromDocCloseShiftDocs", docIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> CreateGroupPackWithSpool(Nullable<System.Guid> productID, string printName)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            var printNameParameter = printName != null ?
                new ObjectParameter("PrintName", printName) :
                new ObjectParameter("PrintName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("CreateGroupPackWithSpool", productIDParameter, printNameParameter);
        }
    
        public virtual int CreateDocBrokeWithBrokeDecision(Nullable<System.Guid> docID, Nullable<System.Guid> productID, Nullable<decimal> brokeQuantity, Nullable<System.Guid> rejectionReasonID, string printName, Nullable<int> placeID)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            var brokeQuantityParameter = brokeQuantity.HasValue ?
                new ObjectParameter("BrokeQuantity", brokeQuantity) :
                new ObjectParameter("BrokeQuantity", typeof(decimal));
    
            var rejectionReasonIDParameter = rejectionReasonID.HasValue ?
                new ObjectParameter("RejectionReasonID", rejectionReasonID) :
                new ObjectParameter("RejectionReasonID", typeof(System.Guid));
    
            var printNameParameter = printName != null ?
                new ObjectParameter("PrintName", printName) :
                new ObjectParameter("PrintName", typeof(string));
    
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateDocBrokeWithBrokeDecision", docIDParameter, productIDParameter, brokeQuantityParameter, rejectionReasonIDParameter, printNameParameter, placeIDParameter);
        }
    
        public virtual int MakeProductionTaskActiveForPlace(Nullable<int> placeID, Nullable<System.Guid> productionTaskBatchID)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var productionTaskBatchIDParameter = productionTaskBatchID.HasValue ?
                new ObjectParameter("ProductionTaskBatchID", productionTaskBatchID) :
                new ObjectParameter("ProductionTaskBatchID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MakeProductionTaskActiveForPlace", placeIDParameter, productionTaskBatchIDParameter);
        }
    
        public virtual ObjectResult<CheckProductionTaskSourceSpools_Result1> CheckProductionTaskSourceSpools(Nullable<int> placeID, Nullable<System.Guid> productionTaskID)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var productionTaskIDParameter = productionTaskID.HasValue ?
                new ObjectParameter("ProductionTaskID", productionTaskID) :
                new ObjectParameter("ProductionTaskID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckProductionTaskSourceSpools_Result1>("CheckProductionTaskSourceSpools", placeIDParameter, productionTaskIDParameter);
        }
    
        public virtual ObjectResult<GetSpecificationInputNomenclature_Result> GetSpecificationInputNomenclature(Nullable<System.Guid> nomenclatureID, Nullable<System.Guid> characteristicID, Nullable<int> placeGroupID)
        {
            var nomenclatureIDParameter = nomenclatureID.HasValue ?
                new ObjectParameter("NomenclatureID", nomenclatureID) :
                new ObjectParameter("NomenclatureID", typeof(System.Guid));
    
            var characteristicIDParameter = characteristicID.HasValue ?
                new ObjectParameter("CharacteristicID", characteristicID) :
                new ObjectParameter("CharacteristicID", typeof(System.Guid));
    
            var placeGroupIDParameter = placeGroupID.HasValue ?
                new ObjectParameter("PlaceGroupID", placeGroupID) :
                new ObjectParameter("PlaceGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSpecificationInputNomenclature_Result>("GetSpecificationInputNomenclature", nomenclatureIDParameter, characteristicIDParameter, placeGroupIDParameter);
        }
    
        public virtual ObjectResult<GetSpecificationNomenclatureOnPlace_Result> GetSpecificationNomenclatureOnPlace(Nullable<int> placeID, Nullable<System.DateTime> date)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSpecificationNomenclatureOnPlace_Result>("GetSpecificationNomenclatureOnPlace", placeIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<string> DeletPlaceZone(Nullable<System.Guid> placeZoneID)
        {
            var placeZoneIDParameter = placeZoneID.HasValue ?
                new ObjectParameter("PlaceZoneID", placeZoneID) :
                new ObjectParameter("PlaceZoneID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeletPlaceZone", placeZoneIDParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftRwSpools_Result3> FillDocCloseShiftRwSpools(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftRwSpools_Result3>("FillDocCloseShiftRwSpools", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<CreateUnloadSpools_Result1> CreateUnloadSpools(Nullable<System.Guid> docID, Nullable<System.Guid> productionTaskID, Nullable<int> diameter, Nullable<int> breakNumber, Nullable<decimal> length)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            var productionTaskIDParameter = productionTaskID.HasValue ?
                new ObjectParameter("ProductionTaskID", productionTaskID) :
                new ObjectParameter("ProductionTaskID", typeof(System.Guid));
    
            var diameterParameter = diameter.HasValue ?
                new ObjectParameter("Diameter", diameter) :
                new ObjectParameter("Diameter", typeof(int));
    
            var breakNumberParameter = breakNumber.HasValue ?
                new ObjectParameter("BreakNumber", breakNumber) :
                new ObjectParameter("BreakNumber", typeof(int));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CreateUnloadSpools_Result1>("CreateUnloadSpools", docIDParameter, productionTaskIDParameter, diameterParameter, breakNumberParameter, lengthParameter);
        }
    
        public virtual ObjectResult<GetDocCloseShiftBalerBales_Result> GetDocCloseShiftBalerBales(Nullable<System.Guid> docID)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocCloseShiftBalerBales_Result>("GetDocCloseShiftBalerBales", docIDParameter);
        }
    
        public virtual int Get1CDocShipmentOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get1CDocShipmentOrders");
        }
    
        public virtual int Get1CNomenclature()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get1CNomenclature");
        }
    
        public virtual ObjectResult<FillDocCloseShiftConvertingWastes_Result> FillDocCloseShiftConvertingWastes(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftConvertingWastes_Result>("FillDocCloseShiftConvertingWastes", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<GetProductionTaskBatchCuttingsSGB_Result1> GetProductionTaskBatchCuttingsSGB(Nullable<System.Guid> productionTaskBatchID)
        {
            var productionTaskBatchIDParameter = productionTaskBatchID.HasValue ?
                new ObjectParameter("ProductionTaskBatchID", productionTaskBatchID) :
                new ObjectParameter("ProductionTaskBatchID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductionTaskBatchCuttingsSGB_Result1>("GetProductionTaskBatchCuttingsSGB", productionTaskBatchIDParameter);
        }
    
        public virtual ObjectResult<CheckInstallProductionTaskSourceSpools_Result> CheckInstallProductionTaskSourceSpools(Nullable<int> placeID, Nullable<System.Guid> productID)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckInstallProductionTaskSourceSpools_Result>("CheckInstallProductionTaskSourceSpools", placeIDParameter, productIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetDocBrokeEditable(Nullable<System.DateTime> docDate, Nullable<System.Guid> docUserID, Nullable<int> docShiftID, Nullable<bool> docIsConfirmed, Nullable<System.Guid> userID, Nullable<int> shiftID, Nullable<System.Guid> docID)
        {
            var docDateParameter = docDate.HasValue ?
                new ObjectParameter("docDate", docDate) :
                new ObjectParameter("docDate", typeof(System.DateTime));
    
            var docUserIDParameter = docUserID.HasValue ?
                new ObjectParameter("docUserID", docUserID) :
                new ObjectParameter("docUserID", typeof(System.Guid));
    
            var docShiftIDParameter = docShiftID.HasValue ?
                new ObjectParameter("docShiftID", docShiftID) :
                new ObjectParameter("docShiftID", typeof(int));
    
            var docIsConfirmedParameter = docIsConfirmed.HasValue ?
                new ObjectParameter("docIsConfirmed", docIsConfirmed) :
                new ObjectParameter("docIsConfirmed", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetDocBrokeEditable", docDateParameter, docUserIDParameter, docShiftIDParameter, docIsConfirmedParameter, userIDParameter, shiftIDParameter, docIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> GetDocBrokeID(Nullable<int> placeID, Nullable<System.Guid> userID, Nullable<int> shiftID, Nullable<int> docProductionPlaceID, Nullable<bool> isProductionPlace)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var docProductionPlaceIDParameter = docProductionPlaceID.HasValue ?
                new ObjectParameter("docProductionPlaceID", docProductionPlaceID) :
                new ObjectParameter("docProductionPlaceID", typeof(int));
    
            var isProductionPlaceParameter = isProductionPlace.HasValue ?
                new ObjectParameter("IsProductionPlace", isProductionPlace) :
                new ObjectParameter("IsProductionPlace", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("GetDocBrokeID", placeIDParameter, userIDParameter, shiftIDParameter, docProductionPlaceIDParameter, isProductionPlaceParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> CheckPermissionOnCreateNewProduct(Nullable<System.Guid> productionTaskBatchId, Nullable<System.Guid> userID)
        {
            var productionTaskBatchIdParameter = productionTaskBatchId.HasValue ?
                new ObjectParameter("ProductionTaskBatchId", productionTaskBatchId) :
                new ObjectParameter("ProductionTaskBatchId", typeof(System.Guid));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("CheckPermissionOnCreateNewProduct", productionTaskBatchIdParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> CheckPermissionOnChooseNomenclatureAndCharacteristic(Nullable<int> productKindID, Nullable<int> placeID, Nullable<System.Guid> userID)
        {
            var productKindIDParameter = productKindID.HasValue ?
                new ObjectParameter("ProductKindID", productKindID) :
                new ObjectParameter("ProductKindID", typeof(int));
    
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("CheckPermissionOnChooseNomenclatureAndCharacteristic", productKindIDParameter, placeIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetLogEventHierarchy_Result> GetLogEventHierarchy(Nullable<System.Guid> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLogEventHierarchy_Result>("GetLogEventHierarchy", eventIDParameter);
        }
    
        public virtual ObjectResult<GetDocCloseShiftWarehouseMovements_Result> GetDocCloseShiftWarehouseMovements(Nullable<System.Guid> docID, Nullable<System.Guid> personGuid)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocCloseShiftWarehouseMovements_Result>("GetDocCloseShiftWarehouseMovements", docIDParameter, personGuidParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> FillDocCloseShiftWarehouseDocs(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate, Nullable<System.Guid> personID)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("FillDocCloseShiftWarehouseDocs", placeIDParameter, shiftIDParameter, closeDateParameter, personIDParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftWarehouseMovements_Result> FillDocCloseShiftWarehouseMovements(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate, Nullable<System.Guid> personID)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftWarehouseMovements_Result>("FillDocCloseShiftWarehouseMovements", placeIDParameter, shiftIDParameter, closeDateParameter, personIDParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftMovementProducts_Result> FillDocCloseShiftMovementProducts(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftMovementProducts_Result>("FillDocCloseShiftMovementProducts", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftPMMaterials_Result> FillDocCloseShiftPMMaterials(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftPMMaterials_Result>("FillDocCloseShiftPMMaterials", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftPMSpools_Result> FillDocCloseShiftPMSpools(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftPMSpools_Result>("FillDocCloseShiftPMSpools", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftPMWastes_Result> FillDocCloseShiftPMWastes(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftPMWastes_Result>("FillDocCloseShiftPMWastes", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        [DbFunction("GammaEntities", "GetDocCloseShiftWarehouseMovement")]
        public virtual IQueryable<GetDocCloseShiftWarehouseMovement_Result> GetDocCloseShiftWarehouseMovement(Nullable<System.Guid> docID, Nullable<System.Guid> personGuid)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            var personGuidParameter = personGuid.HasValue ?
                new ObjectParameter("PersonGuid", personGuid) :
                new ObjectParameter("PersonGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDocCloseShiftWarehouseMovement_Result>("[GammaEntities].[GetDocCloseShiftWarehouseMovement](@DocID, @PersonGuid)", docIDParameter, personGuidParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftUtilizationSpools_Result> FillDocCloseShiftUtilizationSpools(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftUtilizationSpools_Result>("FillDocCloseShiftUtilizationSpools", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        [DbFunction("GammaEntities", "GetProductMaterials")]
        public virtual IQueryable<GetProductMaterials_Result> GetProductMaterials()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetProductMaterials_Result>("[GammaEntities].[GetProductMaterials]()");
        }
    
        public virtual ObjectResult<FillDocCloseShiftMaterials_Result> FillDocCloseShiftMaterials(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftMaterials_Result>("FillDocCloseShiftMaterials", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftMaterialsAtBegin_Result> FillDocCloseShiftMaterialsAtBegin(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftMaterialsAtBegin_Result>("FillDocCloseShiftMaterialsAtBegin", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftMaterialsAtEnd_Result> FillDocCloseShiftMaterialsAtEnd(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftMaterialsAtEnd_Result>("FillDocCloseShiftMaterialsAtEnd", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual int CheckConnection()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckConnection");
        }
    
        public virtual int CreateDocBrokeWithBrokeDecisionComment(Nullable<System.Guid> docID, Nullable<System.Guid> productID, Nullable<decimal> brokeQuantity, Nullable<System.Guid> rejectionReasonID, string comment, string printName, Nullable<int> placeID)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            var brokeQuantityParameter = brokeQuantity.HasValue ?
                new ObjectParameter("BrokeQuantity", brokeQuantity) :
                new ObjectParameter("BrokeQuantity", typeof(decimal));
    
            var rejectionReasonIDParameter = rejectionReasonID.HasValue ?
                new ObjectParameter("RejectionReasonID", rejectionReasonID) :
                new ObjectParameter("RejectionReasonID", typeof(System.Guid));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var printNameParameter = printName != null ?
                new ObjectParameter("PrintName", printName) :
                new ObjectParameter("PrintName", typeof(string));
    
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateDocBrokeWithBrokeDecisionComment", docIDParameter, productIDParameter, brokeQuantityParameter, rejectionReasonIDParameter, commentParameter, printNameParameter, placeIDParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftConvertingWastesProduct_Result> FillDocCloseShiftConvertingWastesProduct(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftConvertingWastesProduct_Result>("FillDocCloseShiftConvertingWastesProduct", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftProductionProducts_Result> FillDocCloseShiftProductionProducts(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftProductionProducts_Result>("FillDocCloseShiftProductionProducts", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<GetDocCloseShiftProductionProducts_Result> GetDocCloseShiftProductionProducts(Nullable<System.Guid> docID)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocCloseShiftProductionProducts_Result>("GetDocCloseShiftProductionProducts", docIDParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftUtilizationProducts_Result> FillDocCloseShiftUtilizationProducts(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftUtilizationProducts_Result>("FillDocCloseShiftUtilizationProducts", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftRepackProducts_Result> FillDocCloseShiftRepackProducts(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftRepackProducts_Result>("FillDocCloseShiftRepackProducts", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<GetBatchSamples_Result> GetBatchSamples(Nullable<System.Guid> productionTaskBatchID, Nullable<int> intervalID)
        {
            var productionTaskBatchIDParameter = productionTaskBatchID.HasValue ?
                new ObjectParameter("ProductionTaskBatchID", productionTaskBatchID) :
                new ObjectParameter("ProductionTaskBatchID", typeof(System.Guid));
    
            var intervalIDParameter = intervalID.HasValue ?
                new ObjectParameter("IntervalID", intervalID) :
                new ObjectParameter("IntervalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchSamples_Result>("GetBatchSamples", productionTaskBatchIDParameter, intervalIDParameter);
        }
    
        public virtual ObjectResult<string> DeleteSample(Nullable<System.Guid> productionTaskConvertingSampleID)
        {
            var productionTaskConvertingSampleIDParameter = productionTaskConvertingSampleID.HasValue ?
                new ObjectParameter("ProductionTaskConvertingSampleID", productionTaskConvertingSampleID) :
                new ObjectParameter("ProductionTaskConvertingSampleID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteSample", productionTaskConvertingSampleIDParameter);
        }
    
        public virtual ObjectResult<string> CreateSample(Nullable<System.Guid> productionTaskBatchID, Nullable<int> quantity)
        {
            var productionTaskBatchIDParameter = productionTaskBatchID.HasValue ?
                new ObjectParameter("ProductionTaskBatchID", productionTaskBatchID) :
                new ObjectParameter("ProductionTaskBatchID", typeof(System.Guid));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreateSample", productionTaskBatchIDParameter, quantityParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftConvertingSamples_Result> FillDocCloseShiftConvertingSamples(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftConvertingSamples_Result>("FillDocCloseShiftConvertingSamples", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftRwUnwinderSpools_Result> FillDocCloseShiftRwUnwinderSpools(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftRwUnwinderSpools_Result>("FillDocCloseShiftRwUnwinderSpools", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<FillDocMaterialProductions_Result> FillDocMaterialProductions(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate, Nullable<bool> isCompositionCalculation, string productionCharacteristicIDs)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            var isCompositionCalculationParameter = isCompositionCalculation.HasValue ?
                new ObjectParameter("IsCompositionCalculation", isCompositionCalculation) :
                new ObjectParameter("IsCompositionCalculation", typeof(bool));
    
            var productionCharacteristicIDsParameter = productionCharacteristicIDs != null ?
                new ObjectParameter("ProductionCharacteristicIDs", productionCharacteristicIDs) :
                new ObjectParameter("ProductionCharacteristicIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocMaterialProductions_Result>("FillDocMaterialProductions", placeIDParameter, shiftIDParameter, closeDateParameter, isCompositionCalculationParameter, productionCharacteristicIDsParameter);
        }
    
        public virtual ObjectResult<FillDocMaterialProductionsAtBegin_Result> FillDocMaterialProductionsAtBegin(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> date, Nullable<bool> isCompositionCalculation, string productionCharacteristicIDs)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var isCompositionCalculationParameter = isCompositionCalculation.HasValue ?
                new ObjectParameter("IsCompositionCalculation", isCompositionCalculation) :
                new ObjectParameter("IsCompositionCalculation", typeof(bool));
    
            var productionCharacteristicIDsParameter = productionCharacteristicIDs != null ?
                new ObjectParameter("ProductionCharacteristicIDs", productionCharacteristicIDs) :
                new ObjectParameter("ProductionCharacteristicIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocMaterialProductionsAtBegin_Result>("FillDocMaterialProductionsAtBegin", placeIDParameter, shiftIDParameter, dateParameter, isCompositionCalculationParameter, productionCharacteristicIDsParameter);
        }
    
        public virtual ObjectResult<FillDocMaterialProductionsIn_Result> FillDocMaterialProductionsIn(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> date, Nullable<bool> isCompositionCalculation, Nullable<System.Guid> fromDocID)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var isCompositionCalculationParameter = isCompositionCalculation.HasValue ?
                new ObjectParameter("IsCompositionCalculation", isCompositionCalculation) :
                new ObjectParameter("IsCompositionCalculation", typeof(bool));
    
            var fromDocIDParameter = fromDocID.HasValue ?
                new ObjectParameter("FromDocID", fromDocID) :
                new ObjectParameter("FromDocID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocMaterialProductionsIn_Result>("FillDocMaterialProductionsIn", placeIDParameter, shiftIDParameter, dateParameter, isCompositionCalculationParameter, fromDocIDParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftMaterialsDismiss_Result> FillDocCloseShiftMaterialsDismiss(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftMaterialsDismiss_Result>("FillDocCloseShiftMaterialsDismiss", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<GetDocMaterialProductionsOnShift_Result> GetDocMaterialProductionsOnShift(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocMaterialProductionsOnShift_Result>("GetDocMaterialProductionsOnShift", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<CheckCurrentVersion_Result> CheckCurrentVersion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckCurrentVersion_Result>("CheckCurrentVersion");
        }
    
        public virtual ObjectResult<string> DeleteNewPalletInDocComplectation(Nullable<System.Guid> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteNewPalletInDocComplectation", productIDParameter);
        }
    
        [DbFunction("GammaEntities", "Get1COrders")]
        public virtual IQueryable<Get1COrders_Result> Get1COrders(Nullable<int> placeID, string number, Nullable<System.DateTime> dateOfBegin, Nullable<System.DateTime> dateOfEnd, Nullable<bool> isOutOrders, Nullable<int> rowCount)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var dateOfBeginParameter = dateOfBegin.HasValue ?
                new ObjectParameter("DateOfBegin", dateOfBegin) :
                new ObjectParameter("DateOfBegin", typeof(System.DateTime));
    
            var dateOfEndParameter = dateOfEnd.HasValue ?
                new ObjectParameter("DateOfEnd", dateOfEnd) :
                new ObjectParameter("DateOfEnd", typeof(System.DateTime));
    
            var isOutOrdersParameter = isOutOrders.HasValue ?
                new ObjectParameter("IsOutOrders", isOutOrders) :
                new ObjectParameter("IsOutOrders", typeof(bool));
    
            var rowCountParameter = rowCount.HasValue ?
                new ObjectParameter("RowCount", rowCount) :
                new ObjectParameter("RowCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Get1COrders_Result>("[GammaEntities].[Get1COrders](@PlaceID, @Number, @DateOfBegin, @DateOfEnd, @IsOutOrders, @RowCount)", placeIDParameter, numberParameter, dateOfBeginParameter, dateOfEndParameter, isOutOrdersParameter, rowCountParameter);
        }
    
        [DbFunction("GammaEntities", "GetProductKinds")]
        public virtual IQueryable<GetProductKinds_Result> GetProductKinds(Nullable<System.Guid> parentID)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetProductKinds_Result>("[GammaEntities].[GetProductKinds](@ParentID)", parentIDParameter);
        }
    
        public virtual ObjectResult<GetBatchRepackProducts_Result> GetBatchRepackProducts(Nullable<System.Guid> productionTaskBatchID, Nullable<int> intervalID)
        {
            var productionTaskBatchIDParameter = productionTaskBatchID.HasValue ?
                new ObjectParameter("ProductionTaskBatchID", productionTaskBatchID) :
                new ObjectParameter("ProductionTaskBatchID", typeof(System.Guid));
    
            var intervalIDParameter = intervalID.HasValue ?
                new ObjectParameter("IntervalID", intervalID) :
                new ObjectParameter("IntervalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchRepackProducts_Result>("GetBatchRepackProducts", productionTaskBatchIDParameter, intervalIDParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftConvertingAuxiliaryMaterials_Result> FillDocCloseShiftConvertingAuxiliaryMaterials(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftConvertingAuxiliaryMaterials_Result>("FillDocCloseShiftConvertingAuxiliaryMaterials", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<string> CreateDowntime(Nullable<System.Guid> productionTaskBatchID, Nullable<int> duration, Nullable<System.Guid> downtimeTypeID, Nullable<System.Guid> downtimeTypeDetailID, Nullable<System.DateTime> dateBegin, Nullable<System.DateTime> dateEnd, string comment, Nullable<System.Guid> equipmentNodeID, Nullable<System.Guid> equipmentNodeDetailID, Nullable<int> shiftID)
        {
            var productionTaskBatchIDParameter = productionTaskBatchID.HasValue ?
                new ObjectParameter("ProductionTaskBatchID", productionTaskBatchID) :
                new ObjectParameter("ProductionTaskBatchID", typeof(System.Guid));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            var downtimeTypeIDParameter = downtimeTypeID.HasValue ?
                new ObjectParameter("DowntimeTypeID", downtimeTypeID) :
                new ObjectParameter("DowntimeTypeID", typeof(System.Guid));
    
            var downtimeTypeDetailIDParameter = downtimeTypeDetailID.HasValue ?
                new ObjectParameter("DowntimeTypeDetailID", downtimeTypeDetailID) :
                new ObjectParameter("DowntimeTypeDetailID", typeof(System.Guid));
    
            var dateBeginParameter = dateBegin.HasValue ?
                new ObjectParameter("DateBegin", dateBegin) :
                new ObjectParameter("DateBegin", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var equipmentNodeIDParameter = equipmentNodeID.HasValue ?
                new ObjectParameter("EquipmentNodeID", equipmentNodeID) :
                new ObjectParameter("EquipmentNodeID", typeof(System.Guid));
    
            var equipmentNodeDetailIDParameter = equipmentNodeDetailID.HasValue ?
                new ObjectParameter("EquipmentNodeDetailID", equipmentNodeDetailID) :
                new ObjectParameter("EquipmentNodeDetailID", typeof(System.Guid));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CreateDowntime", productionTaskBatchIDParameter, durationParameter, downtimeTypeIDParameter, downtimeTypeDetailIDParameter, dateBeginParameter, dateEndParameter, commentParameter, equipmentNodeIDParameter, equipmentNodeDetailIDParameter, shiftIDParameter);
        }
    
        public virtual ObjectResult<string> DeleteDowntime(Nullable<System.Guid> productionTaskDowntimeID)
        {
            var productionTaskDowntimeIDParameter = productionTaskDowntimeID.HasValue ?
                new ObjectParameter("ProductionTaskDowntimeID", productionTaskDowntimeID) :
                new ObjectParameter("ProductionTaskDowntimeID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeleteDowntime", productionTaskDowntimeIDParameter);
        }
    
        public virtual ObjectResult<FillDocCloseShiftDowntimes_Result> FillDocCloseShiftDowntimes(Nullable<int> placeID, Nullable<int> shiftID, Nullable<System.DateTime> closeDate)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var closeDateParameter = closeDate.HasValue ?
                new ObjectParameter("CloseDate", closeDate) :
                new ObjectParameter("CloseDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FillDocCloseShiftDowntimes_Result>("FillDocCloseShiftDowntimes", placeIDParameter, shiftIDParameter, closeDateParameter);
        }
    
        public virtual ObjectResult<GetBatchDowntimes_Result> GetBatchDowntimes(Nullable<System.Guid> productionTaskBatchID, Nullable<int> intervalID)
        {
            var productionTaskBatchIDParameter = productionTaskBatchID.HasValue ?
                new ObjectParameter("ProductionTaskBatchID", productionTaskBatchID) :
                new ObjectParameter("ProductionTaskBatchID", typeof(System.Guid));
    
            var intervalIDParameter = intervalID.HasValue ?
                new ObjectParameter("IntervalID", intervalID) :
                new ObjectParameter("IntervalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchDowntimes_Result>("GetBatchDowntimes", productionTaskBatchIDParameter, intervalIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> CreateNewTaskBatchOneBased(Nullable<System.Guid> productionTaskBatchID)
        {
            var productionTaskBatchIDParameter = productionTaskBatchID.HasValue ?
                new ObjectParameter("ProductionTaskBatchID", productionTaskBatchID) :
                new ObjectParameter("ProductionTaskBatchID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("CreateNewTaskBatchOneBased", productionTaskBatchIDParameter);
        }
    
        [DbFunction("GammaEntities", "GetNomenclatureAnalogs")]
        public virtual IQueryable<GetNomenclatureAnalogs_Result> GetNomenclatureAnalogs(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNomenclatureAnalogs_Result>("[GammaEntities].[GetNomenclatureAnalogs](@Date)", dateParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetDocBrokeDecisionEditable(Nullable<System.Guid> userID, Nullable<int> shiftID, Nullable<System.Guid> docID, Nullable<System.Guid> productID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(System.Guid));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetDocBrokeDecisionEditable", userIDParameter, shiftIDParameter, docIDParameter, productIDParameter);
        }
    
        public virtual ObjectResult<UtilizationProductWithRepackInDocBroke_Result> UtilizationProductWithRepackInDocBroke(Nullable<System.Guid> productID, Nullable<decimal> quantityBroke, Nullable<int> shiftID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            var quantityBrokeParameter = quantityBroke.HasValue ?
                new ObjectParameter("QuantityBroke", quantityBroke) :
                new ObjectParameter("QuantityBroke", typeof(decimal));
    
            var shiftIDParameter = shiftID.HasValue ?
                new ObjectParameter("ShiftID", shiftID) :
                new ObjectParameter("ShiftID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UtilizationProductWithRepackInDocBroke_Result>("UtilizationProductWithRepackInDocBroke", productIDParameter, quantityBrokeParameter, shiftIDParameter);
        }
    
        public virtual int UnpackGroupPackOnPlace(Nullable<System.Guid> productID, Nullable<int> placeID, string printName)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(System.Guid));
    
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var printNameParameter = printName != null ?
                new ObjectParameter("PrintName", printName) :
                new ObjectParameter("PrintName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnpackGroupPackOnPlace", productIDParameter, placeIDParameter, printNameParameter);
        }
    
        public virtual ObjectResult<string> ValidateSpoolBeforeSave(Nullable<System.Guid> nomenclatureID, Nullable<System.Guid> characteristicID, Nullable<decimal> diameter, Nullable<decimal> weight, Nullable<int> format)
        {
            var nomenclatureIDParameter = nomenclatureID.HasValue ?
                new ObjectParameter("NomenclatureID", nomenclatureID) :
                new ObjectParameter("NomenclatureID", typeof(System.Guid));
    
            var characteristicIDParameter = characteristicID.HasValue ?
                new ObjectParameter("CharacteristicID", characteristicID) :
                new ObjectParameter("CharacteristicID", typeof(System.Guid));
    
            var diameterParameter = diameter.HasValue ?
                new ObjectParameter("Diameter", diameter) :
                new ObjectParameter("Diameter", typeof(decimal));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var formatParameter = format.HasValue ?
                new ObjectParameter("Format", format) :
                new ObjectParameter("Format", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ValidateSpoolBeforeSave", nomenclatureIDParameter, characteristicIDParameter, diameterParameter, weightParameter, formatParameter);
        }
    
        public virtual int MakeProductionTaskActive(Nullable<int> placeID, Nullable<System.Guid> productionTaskID, Nullable<System.DateTime> date)
        {
            var placeIDParameter = placeID.HasValue ?
                new ObjectParameter("PlaceID", placeID) :
                new ObjectParameter("PlaceID", typeof(int));
    
            var productionTaskIDParameter = productionTaskID.HasValue ?
                new ObjectParameter("ProductionTaskID", productionTaskID) :
                new ObjectParameter("ProductionTaskID", typeof(System.Guid));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MakeProductionTaskActive", placeIDParameter, productionTaskIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<string> SetDateActualStartInProductionTasks(Nullable<System.Guid> productionTaskID, Nullable<System.DateTime> actualStartDate)
        {
            var productionTaskIDParameter = productionTaskID.HasValue ?
                new ObjectParameter("ProductionTaskID", productionTaskID) :
                new ObjectParameter("ProductionTaskID", typeof(System.Guid));
    
            var actualStartDateParameter = actualStartDate.HasValue ?
                new ObjectParameter("ActualStartDate", actualStartDate) :
                new ObjectParameter("ActualStartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SetDateActualStartInProductionTasks", productionTaskIDParameter, actualStartDateParameter);
        }
    }
}
